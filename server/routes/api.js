// Here we define all api end points
const express = require('express')
const router = express.Router()

// first require mongoose
const mongoose = require('mongoose')

// require User model for mongoDb 
const User = require('../models/user')

// instance of user-service with methods: userExists, validateUSer (for POST login/register)
const userService = require('../services/user-service')

mongoose.set('useFindAndModify', false);
mongoose.set('useCreateIndex', true);


// second declare the connection string to the db
// the connection string is found on mongodb.com
// Clusters > connect (1. enter your ip adress, 2. have a MongoDb User - Database Access) > 
// > choose connection method (choose Connect Your App - Get a connection string and view driver...)
// > copy Connection String > paste
// mongodb+srv://USERVIKTOR:<PASSWORD>@cluster0-sb6vz.mongodb.net/TEST?retryWrites=true&w=majority
// change <password> with our password from user: userviktor, pass: autogenerated
// change "test" with "eventsdb" which is the name of our db, created in mongodb.com (else new db named test will be created)
const db = 'mongodb+srv://userviktor:lLRQPcVml73mt9pD@cluster0-sb6vz.mongodb.net/eventsdb?retryWrites=true&w=majority'

// third, connect to the db, first argument is the conn. string (db), second is callback with err to handle error
mongoose.connect(db)
    .then(() => console.log('Mongoose Connected !'))
    .catch(() => console.log('Error Connection - mongoose'))


// Check if mail exists in registration function 
// function mailExists(user) {
//     User.findOne({ email: user.email }, (err, foundUser) => {
//         if (err) {
//             return null
//         } else if (foundUser == null) {
//             console.log('No records found')
//         } else {
//             return foundUser.email
//         }
//     })
// }

// standar route that returns message on "localhost:3000/api"
router.get('/', (req, res) => {
    res.send('Sent from API route')
})

// POST request - REGISTER a user (localhost:3000/api/register)
router.post('/register', userService.userExists, (req, res) => {
    // req.body - extract user data from the request
    // create user according to the mongoDb model - User
    // bcrypt.hashSync encrypts password (first parameter), and adds complexity (second parameter - 10)
    // req.body.password = bcrypt.hashSync(req.body.password, 10)

    // const user = new User(req.body);
    // User.findOne({ email: user.email }, (err, foundUser) => {
    //     if (err) {
    //         console.log(err)
    //     } else if (foundUser) {
    //         res.status(409).send(`Mail ${foundUser.email} already exists !`)
    //     } else if (!foundUser) {
    //         userService.saveUser(user, res)
    //     }
    // })
    // userService.saveUser(user, res)

})

// GET request for getting the posted users
router.get('/users', (req, res) => {
    // .find() - mongoose method for getting all data
    User.find((error, document) => {
        error
            ? console.log('Error getting users: ' + error)
            : res.status(200).json({
                message: 'DATA fetched',
                document: document
            })
    })
    // with then / catch
    // User.find().then(document => {
    //     res.status(200)
    //         .json({
    //             message: 'Data fetched',
    //             document: document
    //         })
    // })
    // .catch(() => console.log('Error from get'));
})

// POST request for LOGIN
router.post('/login', userService.validateUser, (req, res) => {
    // const userData = new User(req.body)
    // // check if the username exists in the DB, using findOne method that Mongoose provides:
    // // passing the email from the frontend "userData.email" to compare if it exists
    // // then callback method (error, user) which shows error or finds data "user"
    // // lastly we handle the possible error scenarios
    // User.findOne({ email: userData.email }, (error, user) => {
    //     if (error) {
    //         console.log('Login error: ' + error)
    //     }
    //     else {
    //         // if no users is found > 401:
    //         if (!user) {
    //             res.status(401).send('Invalid email')
    //         }
    //         else {
    //             // if password is not equal > 401:
    //             // if (user.password !== userData.password)
    //             const passwordMatch = bcrypt.compareSync(userData.password, user.password)
    //             if (!passwordMatch) {
    //                 res.status(401).send('Invalid password !')
    //             }
    //             // lastly when we have a user and the password is correct > 200:
    //             else {

    //             }
    //         }
    //     }
    // })


    // // generate token using tokenService and send success message (sending token is optional)
    // const token = tokenService.generateToken(user._id)
})

// GET request that returns dummy array as response
router.get('/events', (req, res) => {
    let events = [
        {
            'id': '1',
            'name': 'auto Expo',
            'description': 'lorem impsum',
            'date': 'date1'
        },
        {
            'id': '2',
            'name': 'second event',
            'description': 'lorem impsum',
            'date': 'date2'
        }, {
            'id': '3',
            'name': 'third event',
            'description': 'lorem impsum',
            'date': 'date3'
        }, {
            'id': '4',
            'name': 'Mountain film festival',
            'description': 'lorem impsum',
            'date': 'date4'
        }, {
            'id': '5',
            'name': 'Code fu',
            'description': 'lorem impsum',
            'date': 'date5'
        },
    ]
    res.json(events)
})


// eporting the router to be used in server then 
module.exports = router;